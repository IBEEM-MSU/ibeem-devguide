[["index.html", "Programming techniques for biodiversity, geodiversity, and macrosystems science A development guide from the MSU Institute for Biodiversity, Ecology, Evolution, and Macrosystems 1 Introduction", " Programming techniques for biodiversity, geodiversity, and macrosystems science A development guide from the MSU Institute for Biodiversity, Ecology, Evolution, and Macrosystems Patrick Bills Phoebe Zarnestke 2023-10-30 1 Introduction This guide is for current practitioners and programmers of computational biodiversity, ecology, evolution, and macrosystems science/research who want to improve the way they create and share their code. This is focused on, but not limited to the R System for Statistics. Each chapter covers a technique borrowed from software engineering that could be applied to your code, with motivation for why you’d need it, what problem is being solved, the outcome and alternatives (if any). This is in early stages of development "],["intro.html", "2 Motivation and Introduction", " 2 Motivation and Introduction Reproducibility is a hallmark of science and in 2016 the paper 1,500 scientists lift the lid on reproducibility from Nature made it clear there was a problem. One of the main tools to address this problem is software and specifically software design. Being transparent by publishing anbd documenting the code you use to produce results goes a very long way, but it’s not quite enough. It allows others to see how you got there, but doesn’t allow them to go there on their own. Reproducibily is a major tenet of software engineering practice. Collaborators must be able to unequivocally reproduce a development environment in order to test the execution of changes to a code base. Software engineers crave efficiency and attempt to be able to reuse components to reduce writing additional code that must be debugged. These and other principles lead to design principles in software that could go a long way to ensure reproducibilty in data-intensive research. References: 1,500 scientists lift the lid on reproducibility, Monya Baker, Nature volume 533, pages 452–454 (2016) "],["resources.html", "3 Resources", " 3 Resources Other sources of guidance for reproducibility: Research Software: Designing for Publication and Reproducibility from NYU libraries Ten simple rules for implementing open and reproducible research practices after attending a training course, PLOS Computational Biology, 2003 https://doi.org/10.1371/journal.pcbi.1010750 Appendix D. Reproducible analysis and workflow from Modern Data Science with R, 2nd ed, Benjamin S. Baumer, Daniel T. Kaplan, and Nicholas J. Horton, 2023 Happy Git and GitHub for the useR, Jenny Bryan The FAIR Data Principles "],["flexibility.html", "4 Flexibility 4.1 use relative paths 4.2 Using command line Arguments", " 4 Flexibility How to design your programs and techniques to run in different environments, contexts and with different data 4.1 use relative paths 4.2 Using command line Arguments "],["managing-packages-and-dependencies-across-project.html", "5 Managing Packages and Dependencies across project 5.1 the problem(s)", " 5 Managing Packages and Dependencies across project 5.1 the problem(s) Your many projects may require different packages, and different versions of packages. R packages on have base software that needs to be installed. For example geospatial packages almost always requires the GDAL C++ library to be installed on your system. Sometimes some packages are not updated, and then require older version You may have a project you are sharing that needs packages: how to communicate those This has been a problem in Python for a long time, and the solution is to create a ‘virtual environment’ 5.1.1 using renv "],["packaging-ftw.html", "6 Packaging FTW", " 6 Packaging FTW Packaging your code for easier collaboration, re-use and sharing even among your own projects. 6.0.1 Motivating examples … why using library(mypackage) is so satisfying 6.0.2 Literature R : Hadley’s Packaging Book is all you need. And time to learn "],["collaboration-with-git-and-github.html", "7 Collaboration with git and github 7.1 keep stuff out of git that doesn’t belong 7.2 Branching", " 7 Collaboration with git and github There are many great tutorials on Git so we won’t repeat those. This is one from Rstudio: An introduction to Git and how to use it with RStudio from ## git is a communication tool Git with RStudio: Order Matters! Posted May 11, 2022 by Christina Maimone of Northwestern IT Research Computing and Data Services The following are some tips and suggestions after you have an understanding of how git works. 7.1 keep stuff out of git that doesn’t belong See the sections in the tutorial above on .gitignore file. This file is crucially important for keeping configuration (see chapter on configuration) that’s just for you - especially secrets - and also outputs and binary files. 7.1.0.1 starting point Rstudio git projects start with a gitignore file but we frequently have to make one. there is a great resource for cp,,pm gotofmpre starter files, including for R. https://github.com/github/gitignore 7.2 Branching Why Branch? This is a great tutorial on branching: Git Feature Branch Workflow from Atlassian "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
